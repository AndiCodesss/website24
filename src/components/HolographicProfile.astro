---
const { src, alt } = Astro.props;
---

<div class="holographic-container">
  <div class="holographic-wrapper">
    <img src={src} alt={alt} class="holographic-image" />
    <div class="holographic-overlay"></div>
    <div class="holographic-scanlines"></div>
    <div class="holographic-glitch"></div>
    <div class="holographic-particles"></div>
  </div>
  <div class="holographic-base">
    <div class="holographic-ring"></div>
  </div>
</div>

<style>
  .holographic-container {
    position: relative;
    width: 200px;
    height: 200px;
    margin: 2rem auto;
    perspective: 1000px;
  }
  
  .holographic-wrapper {
    position: relative;
    width: 100%;
    height: 100%;
    transform-style: preserve-3d;
    animation: holographicRotate 10s infinite linear;
  }
  
  .holographic-image {
    width: 100%;
    height: 100%;
    border-radius: 50%;
    object-fit: cover;
    position: relative;
    z-index: 2;
    filter: brightness(1.2) contrast(1.1);
    box-shadow: 
      0 0 50px rgba(0, 255, 255, 0.5),
      0 0 100px rgba(0, 255, 255, 0.3),
      inset 0 0 50px rgba(0, 255, 255, 0.2);
  }
  
  .holographic-overlay {
    position: absolute;
    top: -5%;
    left: -5%;
    width: 110%;
    height: 110%;
    border-radius: 50%;
    background: 
      radial-gradient(circle at 30% 30%, rgba(0, 255, 255, 0.3), transparent 50%),
      radial-gradient(circle at 70% 70%, rgba(255, 0, 255, 0.3), transparent 50%);
    animation: holographicPulse 2s infinite alternate;
    pointer-events: none;
  }
  
  .holographic-scanlines {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    overflow: hidden;
    pointer-events: none;
  }
  
  .holographic-scanlines::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 200%;
    background: repeating-linear-gradient(
      0deg,
      transparent,
      transparent 2px,
      rgba(0, 255, 255, 0.1) 2px,
      rgba(0, 255, 255, 0.1) 4px
    );
    animation: scanlines 8s linear infinite;
  }
  
  .holographic-glitch {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    opacity: 0;
    animation: glitch 10s infinite;
    pointer-events: none;
  }
  
  .holographic-glitch::before,
  .holographic-glitch::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background: inherit;
  }
  
  .holographic-glitch::before {
    background: url('/profile-placeholder.jpg') center/cover;
    filter: hue-rotate(90deg) saturate(2);
    transform: translateX(-2px);
    opacity: 0.5;
  }
  
  .holographic-glitch::after {
    background: url('/profile-placeholder.jpg') center/cover;
    filter: hue-rotate(-90deg) saturate(2);
    transform: translateX(2px);
    opacity: 0.5;
  }
  
  .holographic-particles {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    overflow: hidden;
    pointer-events: none;
  }
  
  .holographic-particles::before,
  .holographic-particles::after {
    content: '';
    position: absolute;
    width: 2px;
    height: 2px;
    background: cyan;
    border-radius: 50%;
    box-shadow: 
      10px 10px cyan,
      20px 20px cyan,
      30px 30px cyan,
      40px 40px cyan,
      50px 50px cyan,
      60px 60px cyan,
      70px 70px cyan,
      80px 80px cyan,
      90px 90px cyan,
      100px 100px cyan;
    animation: floatParticles 15s infinite linear;
  }
  
  .holographic-particles::after {
    animation-delay: -7.5s;
    filter: hue-rotate(180deg);
  }
  
  .holographic-base {
    position: absolute;
    bottom: -30px;
    left: 50%;
    transform: translateX(-50%);
    width: 150%;
    height: 60px;
    perspective: 100px;
  }
  
  .holographic-ring {
    width: 100%;
    height: 100%;
    border: 3px solid rgba(0, 255, 255, 0.5);
    border-radius: 50%;
    transform: rotateX(70deg);
    box-shadow: 
      0 0 20px rgba(0, 255, 255, 0.5),
      inset 0 0 20px rgba(0, 255, 255, 0.3);
    animation: ringPulse 2s infinite alternate;
  }
  
  @keyframes holographicRotate {
    from { transform: rotateY(0deg); }
    to { transform: rotateY(360deg); }
  }
  
  @keyframes holographicPulse {
    from { 
      opacity: 0.3;
      transform: scale(1);
    }
    to { 
      opacity: 0.7;
      transform: scale(1.05);
    }
  }
  
  @keyframes scanlines {
    from { transform: translateY(0); }
    to { transform: translateY(-50%); }
  }
  
  @keyframes glitch {
    0%, 90% { opacity: 0; }
    91% { opacity: 1; }
    92% { opacity: 0; }
    93% { opacity: 1; }
    94%, 100% { opacity: 0; }
  }
  
  @keyframes floatParticles {
    from { transform: translateY(100%) translateX(-100%); }
    to { transform: translateY(-100%) translateX(100%); }
  }
  
  @keyframes ringPulse {
    from {
      transform: rotateX(70deg) scale(1);
      opacity: 0.5;
    }
    to {
      transform: rotateX(70deg) scale(1.1);
      opacity: 0.8;
    }
  }
  
  /* Interactive hover effects */
  .holographic-container:hover .holographic-wrapper {
    animation-duration: 3s;
  }
  
  .holographic-container:hover .holographic-image {
    transform: translateZ(20px);
    box-shadow: 
      0 0 80px rgba(0, 255, 255, 0.8),
      0 0 120px rgba(0, 255, 255, 0.5),
      inset 0 0 60px rgba(0, 255, 255, 0.3);
  }
  
  .holographic-container:hover .holographic-glitch {
    animation-duration: 2s;
  }
  
  /* Responsive */
  @media (max-width: 720px) {
    .holographic-container {
      width: 150px;
      height: 150px;
    }
  }
</style>

<script>
  // Add interactive 3D tilt effect
  const container = document.querySelector('.holographic-container');
  const wrapper = document.querySelector('.holographic-wrapper');
  
  if (container && wrapper) {
    container.addEventListener('mousemove', (e) => {
      const rect = container.getBoundingClientRect();
      const x = e.clientX - rect.left - rect.width / 2;
      const y = e.clientY - rect.top - rect.height / 2;
      
      const rotateX = -y / 5;
      const rotateY = x / 5;
      
      wrapper.style.transform = `rotateX(${rotateX}deg) rotateY(${rotateY}deg)`;
    });
    
    container.addEventListener('mouseleave', () => {
      wrapper.style.transform = '';
    });
  }
</script>