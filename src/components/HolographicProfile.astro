---
const { src, alt } = Astro.props;
---

<div class="holographic-container">
  <div class="holographic-wrapper">
    <img src={src} alt={alt} class="holographic-image" />
    <div class="holographic-overlay"></div>
    <div class="holographic-scanlines"></div>
    <div class="holographic-glitch"></div>
    <div class="holographic-particles"></div>
  </div>
  <div class="holographic-base">
    <div class="holographic-ring"></div>
  </div>
</div>

<style>
  .holographic-container {
    position: relative;
    width: 200px;
    height: 200px;
    margin: 2rem auto;
    perspective: 1000px;
  }
  
  .holographic-wrapper {
    position: relative;
    width: 100%;
    height: 100%;
    transform-style: preserve-3d;
  }
  
  .holographic-image {
    width: 100%;
    height: 100%;
    border-radius: 50%;
    object-fit: cover;
    position: relative;
    z-index: 2;
    filter: brightness(1.1) contrast(1.05);
    box-shadow: 0 4px 20px var(--shadow-color);
  }
  
  .holographic-overlay {
    position: absolute;
    top: -5%;
    left: -5%;
    width: 110%;
    height: 110%;
    border-radius: 50%;
    background: radial-gradient(circle at 50% 50%, var(--accent), transparent 70%);
    opacity: 0.2;
    pointer-events: none;
  }
  
  .holographic-scanlines {
    display: none;
  }
  
  .holographic-glitch {
    display: none;
  }
  
  .holographic-particles {
    display: none;
  }
  
  .holographic-base {
    position: absolute;
    bottom: -30px;
    left: 50%;
    transform: translateX(-50%);
    width: 150%;
    height: 60px;
    perspective: 100px;
  }
  
  .holographic-ring {
    width: 100%;
    height: 100%;
    border: 2px solid var(--accent);
    border-radius: 50%;
    transform: rotateX(70deg);
    opacity: 0.3;
  }
  
  
  /* Simplified hover effects */
  .holographic-container:hover .holographic-image {
    transform: translateZ(10px);
    box-shadow: 0 8px 30px var(--shadow-color);
  }
  
  /* Responsive */
  @media (max-width: 720px) {
    .holographic-container {
      width: 150px;
      height: 150px;
    }
  }
</style>

<script>
  // Add interactive 3D tilt effect that follows cursor across entire screen
  const container = document.querySelector('.holographic-container');
  const wrapper = document.querySelector('.holographic-wrapper');
  
  if (container && wrapper) {
    // Track mouse movement across entire document
    document.addEventListener('mousemove', (e) => {
      const rect = container.getBoundingClientRect();
      const containerCenterX = rect.left + rect.width / 2;
      const containerCenterY = rect.top + rect.height / 2;
      
      // Calculate distance from cursor to container center
      const x = e.clientX - containerCenterX;
      const y = e.clientY - containerCenterY;
      
      // Scale the rotation based on distance (max rotation at screen edges)
      const maxRotation = 30; // Maximum rotation in degrees
      const rotateX = -(y / window.innerHeight) * maxRotation;
      const rotateY = (x / window.innerWidth) * maxRotation;
      
      // Apply smooth transition
      wrapper.style.transition = 'transform 0.1s ease-out';
      wrapper.style.transform = `rotateX(${rotateX}deg) rotateY(${rotateY}deg) translateZ(10px)`;
    });
    
    // Optional: Reset on mouse leave window
    document.addEventListener('mouseleave', () => {
      wrapper.style.transition = 'transform 0.5s ease-out';
      wrapper.style.transform = 'rotateX(0) rotateY(0) translateZ(0)';
    });
    
    // Touch support for mobile devices
    document.addEventListener('touchmove', (e) => {
      if (e.touches.length > 0) {
        const touch = e.touches[0];
        const rect = container.getBoundingClientRect();
        const containerCenterX = rect.left + rect.width / 2;
        const containerCenterY = rect.top + rect.height / 2;
        
        const x = touch.clientX - containerCenterX;
        const y = touch.clientY - containerCenterY;
        
        const maxRotation = 20; // Slightly less rotation on mobile
        const rotateX = -(y / window.innerHeight) * maxRotation;
        const rotateY = (x / window.innerWidth) * maxRotation;
        
        wrapper.style.transition = 'transform 0.1s ease-out';
        wrapper.style.transform = `rotateX(${rotateX}deg) rotateY(${rotateY}deg) translateZ(5px)`;
      }
    });
    
    document.addEventListener('touchend', () => {
      wrapper.style.transition = 'transform 0.5s ease-out';
      wrapper.style.transform = 'rotateX(0) rotateY(0) translateZ(0)';
    });
  }
</script>