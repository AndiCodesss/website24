---
// Portal Transition Component
---

<div class="portal-container" id="portalContainer">
  <canvas id="portalCanvas"></canvas>
</div>

<style>
  .portal-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: 9999;
    opacity: 0;
  }
  
  .portal-container.active {
    opacity: 1;
    pointer-events: all;
  }
  
  #portalCanvas {
    width: 100%;
    height: 100%;
  }
</style>

<script>
  import * as THREE from 'three';
  
  class PortalTransition {
    constructor() {
      this.container = document.getElementById('portalContainer');
      this.canvas = document.getElementById('portalCanvas');
      this.scene = null;
      this.camera = null;
      this.renderer = null;
      this.portal = null;
      this.animating = false;
      
      this.init();
      this.interceptLinks();
    }
    
    init() {
      // Three.js setup
      this.scene = new THREE.Scene();
      this.camera = new THREE.PerspectiveCamera(
        75,
        window.innerWidth / window.innerHeight,
        0.1,
        1000
      );
      
      this.renderer = new THREE.WebGLRenderer({
        canvas: this.canvas,
        alpha: true,
        antialias: true
      });
      
      this.renderer.setSize(window.innerWidth, window.innerHeight);
      this.renderer.setPixelRatio(window.devicePixelRatio);
      
      this.camera.position.z = 50;
      
      // Create portal geometry
      const geometry = new THREE.TorusGeometry(20, 8, 16, 100);
      
      // Shader material for portal effect
      const material = new THREE.ShaderMaterial({
        uniforms: {
          time: { value: 0 },
          progress: { value: 0 },
          color1: { value: new THREE.Color(0x667eea) },
          color2: { value: new THREE.Color(0x764ba2) }
        },
        vertexShader: `
          varying vec2 vUv;
          varying vec3 vPosition;
          uniform float time;
          uniform float progress;
          
          void main() {
            vUv = uv;
            vPosition = position;
            
            vec3 pos = position;
            float wave = sin(position.x * 0.1 + time) * 2.0;
            pos.z += wave * progress;
            
            gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);
          }
        `,
        fragmentShader: `
          uniform float time;
          uniform float progress;
          uniform vec3 color1;
          uniform vec3 color2;
          varying vec2 vUv;
          varying vec3 vPosition;
          
          void main() {
            float angle = atan(vPosition.y, vPosition.x);
            float radius = length(vPosition.xy);
            
            float spiral = sin(angle * 10.0 + time * 2.0 + radius * 0.5);
            vec3 color = mix(color1, color2, spiral * 0.5 + 0.5);
            
            float alpha = progress * (1.0 - smoothstep(15.0, 25.0, radius));
            
            gl_FragColor = vec4(color, alpha);
          }
        `,
        transparent: true,
        side: THREE.DoubleSide
      });
      
      this.portal = new THREE.Mesh(geometry, material);
      this.scene.add(this.portal);
      
      // Add particle system
      this.createParticles();
      
      // Resize handler
      window.addEventListener('resize', () => {
        this.camera.aspect = window.innerWidth / window.innerHeight;
        this.camera.updateProjectionMatrix();
        this.renderer.setSize(window.innerWidth, window.innerHeight);
      });
    }
    
    createParticles() {
      const particleCount = 1000;
      const geometry = new THREE.BufferGeometry();
      const positions = new Float32Array(particleCount * 3);
      const colors = new Float32Array(particleCount * 3);
      
      for (let i = 0; i < particleCount; i++) {
        const angle = Math.random() * Math.PI * 2;
        const radius = 15 + Math.random() * 20;
        
        positions[i * 3] = Math.cos(angle) * radius;
        positions[i * 3 + 1] = Math.sin(angle) * radius;
        positions[i * 3 + 2] = (Math.random() - 0.5) * 10;
        
        colors[i * 3] = 0.4 + Math.random() * 0.2;
        colors[i * 3 + 1] = 0.5 + Math.random() * 0.2;
        colors[i * 3 + 2] = 0.9 + Math.random() * 0.1;
      }
      
      geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));
      geometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));
      
      const material = new THREE.PointsMaterial({
        size: 2,
        vertexColors: true,
        transparent: true,
        opacity: 0.8,
        blending: THREE.AdditiveBlending
      });
      
      this.particles = new THREE.Points(geometry, material);
      this.scene.add(this.particles);
    }
    
    interceptLinks() {
      // Intercept all internal navigation
      document.addEventListener('click', (e) => {
        const link = e.target.closest('a');
        if (!link) return;
        
        const href = link.getAttribute('href');
        if (!href || href.startsWith('http') || href.startsWith('#')) return;
        
        e.preventDefault();
        this.transition(href);
      });
    }
    
    transition(targetUrl) {
      if (this.animating) return;
      this.animating = true;
      
      this.container.classList.add('active');
      
      const startTime = Date.now();
      const duration = 1500;
      
      const animate = () => {
        const elapsed = Date.now() - startTime;
        const progress = Math.min(elapsed / duration, 1);
        
        // Update uniforms
        this.portal.material.uniforms.time.value = elapsed * 0.001;
        this.portal.material.uniforms.progress.value = progress;
        
        // Rotate portal
        this.portal.rotation.z += 0.05;
        
        // Rotate particles
        if (this.particles) {
          this.particles.rotation.z -= 0.02;
        }
        
        // Scale effect
        const scale = 1 + progress * 10;
        this.portal.scale.set(scale, scale, scale);
        
        this.renderer.render(this.scene, this.camera);
        
        if (progress < 1) {
          requestAnimationFrame(animate);
        } else {
          // Navigate to new page
          window.location.href = targetUrl;
        }
      };
      
      animate();
    }
  }
  
  // Initialize on DOM load
  document.addEventListener('DOMContentLoaded', () => {
    new PortalTransition();
  });
</script>